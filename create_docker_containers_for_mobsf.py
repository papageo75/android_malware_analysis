import docker
import time
import hashlib



def start_mobsf_container(client, instance):
    """Starts a container with the given ports and environment variables for
    dynamic analysis.
    :param client: docker client
    :param instance: tuple of the form (ports, environment)
    :return: docker container"""
    
    run_instance = "opensecurity/mobile-security-framework-mobsf:latest"

    try:
        container = client.containers.run(
            run_instance,
            detach=True,
            ports=instance[0],
            environment=instance[1],
        )
        # wait for container to start and create folders
        time.sleep(5) 
        return container
    except docker.errors.APIError as e:
        print(f"Error running container: {e}")
        return None



def find_api_key(container):
    """Finds the API key of the container by reading the secret file.
    :param container: docker container
    :return: API key (type: str)"""
    try:
        read_file_command = ["cat","/home/mobsf/.MobSF/secret"]
        result = container.exec_run(read_file_command)
        
        #output is a tuple of (exit_code, output)
        exit_code, output = result 
        
        # Decode the output
        file_contents = output.decode()
        
        # Compute the SHA256 hash of the file contents(api key)
        hash_object = hashlib.sha256(file_contents.encode())
        hex_dig = hash_object.hexdigest()
        return hex_dig
    except docker.errors.APIError as e:
        print(f"Error reading file in container: {e}")
        return None





def initialize_containers(instances): 
    """Starts containers with the given ports and environment variables for
    dynamic analysis.
    :param instances: list of tuples of the form (ports, environment)
    :return: list of API keys (type: str)"""
    
    docker_client = docker.from_env()
    api_keys = []
    i = 1
    for instance in instances:
        container = start_mobsf_container(docker_client, instance)
        if container:
            api_key = find_api_key(container)
            if api_key:
                print(f"API key for instance{i}: {api_key}")
                api_keys.append(api_key)
            else:
                print(f"Error finding API key on instance{i}")
        else:
            print("Container failed to start")
        i += 1
    return api_keys







